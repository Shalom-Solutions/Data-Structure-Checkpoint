/*Description:

Problem 1
 
Given two sets of elements, find the sum of all distinct elements from the set. In other words, find the sum of all elements which are present in either of the given set.
Example:
Set 1 : [3, 1, 7, 9], Set 2: [2, 4, 1, 9, 3]
Output: 13 (distinct elements 4, 7, 2 )
Give a solutions to this problem, using arrays

*/


1. Initialize an empty set `distinct_set`
2. Initialize a variable `sum` to 0
3. Initialize two sets `set1` and `set2` with elements
4. For each element `x` in `set1`, do steps 5-6
5.    If `x` is not in `distinct_set`, add it to `distinct_set` and add `x` to `sum`
6. For each element `y` in `set2`, do steps 7-8
7.    If `y` is not in `distinct_set`, add it to `distinct_set` and add `y` to `sum`
8. Print `sum`


Initialize sum = 0.
Create an empty array "distinct".
For each element "x" in set one:
    If "x" is not in set two or "distinct":
        Add "x" to the "distinct" array.
        Add "x" to the "sum" variable.
For each element "y" in set two:
    If "y" is not in set one or "distinct":
        Add "y" to the "distinct" array.
        Add "y" to the "sum" variable.
Return the "sum".

FUNCTION findDistinctSum(setOne, setTwo)
    sum := 0
    distinct := []
    FOR i FROM 0 TO setOne.length-1 DO
        found := FALSE
        FOR j FROM 0 TO setTwo.length-1 DO
            IF (setOne[i] = setTwo[j]) THEN
                found := TRUE
                BREAK
            END_IF
        END_FOR
        IF (NOT found AND NOT distinct.includes(setOne[i])) THEN
            distinct.Push(setOne[i])
            sum := sum + setOne[i]
        END_IF
    END_FOR
    FOR i FROM 0 TO setTwo.length-1 DO
        found := FALSE
        FOR j FROM 0 TO setOne.length-1 DO
            IF (setTwo[i] = setOne[j]) THEN
                found := TRUE
                BREAK
            END_IF
        END_FOR
        IF (NOT found AND NOT distinct.includes(setTwo[i])) THEN
            distinct.Push(setTwo[i])
            sum := sum + setTwo[i]
        END_IF
    END_FOR
    RETURN sum
END_FUNCTION

/*
Pass by value: In this method, a copy of the value of the parameter is passed to the function or procedure. Any changes made to the parameter inside the function or procedure do not affect the original value outside of the function or procedure.

Pass by reference: In this method, the memory location of the parameter is passed to the function or procedure. Any changes made to the parameter inside the function or procedure affect the original value outside of the function or procedure.

Pass by pointer: This is similar to pass by reference, but instead of passing the memory location of the parameter, a pointer to the memory location is passed.

Pass by array: In this method, the entire array is passed to the function or procedure. Any changes made to the array inside the function or procedure affect the original array outside of the function or procedure.

Pass by object: In object-oriented programming, objects can be passed as parameters. The object is passed by reference, meaning any changes made to the object inside the function or procedure affect the original object outside of the function or procedure.

*/